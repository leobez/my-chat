/* // Create list of current connected sockets
const connected_users = []
for (let [id, socket] of io.of('/').sockets) {
connected_users.push({
userId: id,
username: socket.username
})
}

console.log('CURRENT CONNECTED USERS: ', connected_users)

// Emit to user who just connected the list
socket.emit('connected users', connected_users)

socket.on('disconnect', () => {
// Broadcast to every socket that a user has disconnected
socket.broadcast.emit('user disconnected', {
userId: socket.id,
email: socket.email
})
})

// Broadcast to every socket that a new user has arrived
socket.broadcast.emit('user connected', {
userId: socket.id,
email: socket.email,
})

socket.on('private message', ({content, to}) => {
console.log('transmiting message: ', {content, to, from: socket.id})
socket.to(to).emit('private message', {
content, 
from: socket.id
})
})

/* const io = new socketIO.Server(httpServer, {
    cors: {
        origin: ['http://localhost:3000', 'http://localhost:5173'],
        methods: ['GET'],
        allowedHeaders: ['Content-Type', 'Authorization']
    },
    connectionStateRecovery: {
        maxDisconnectionDuration: 2*60*1000
    }
}) */
